----------------------------------------------------------------------------
some important data flow
----------------------------------------------------------------------------
1、handler_node_idle
    child_task = task.split(1)
	set_node_task(node, child_task)
	  handler_node_task
	    self.tasks[task.id] = task
		__run if task.get_task_count() == 0: 
                   self.__works_done
			set_node_status("done_id", obj.id)
			   handler_node_status
				node['tasks'].remove(task.id)	<-
				task.done = True		<-

2、__try_push_work
    node['works'] = work
    set_node_task(node, work)
	handler_node_task
	  self.queue.put((work[0], work[1], work_done_evt)) ->__works_done
		__works_done
		   self.set_node_status("works", None)
			node.rcv_msg->node['works'] = None

3、自适应任务分发【树形网络-不能环回】
    1. 在发送works，task时，同时将节点任务量发送给接受者
    2. 请求任务时，首先选择临近节点任务量最大的，如果无，选择busy标识的节点
    3. 请求任务时，如果只有一个相邻节点，直接向该节点请求
    4. 接受到works或任务后，通知相邻节点自己最新的任务量

4、环回网络消息分发
    1. 每个节点维护一个 MSG - MSG_ID - list, 记录相邻节点是否已获知 MSG
    2. 接受到MSG后，更新表，检查相邻节点是否有未知的，并向未知节点转发MSG - MSG_ID
    3. 当有新的MSG后[MSG_ID相同，MSG不同]，并清空列表

----------------------------------------------------------------------------
some important struct
----------------------------------------------------------------------------
current, plugin = work
self.queue.put((task.name, work, work_done_evt))
node['works'] = [(task.name, work), ...]
plugin_task_info = {'work':work, 'task':task_name}

